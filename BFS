class vertex:
	def __init__(self, id):
		self.key= id
		self.distance = 1
		self.predecessor = None
		self.color = "White"
		self.connectedto={}
	
	def addneighbour(self, newVertx, wgh=0):
		self.connectedto[newVertx]=wgh
	
	def getname(self):
		return self.key
	
	def getNeighors(self):
		return self.connectedto.keys()
	
	def getweight(self,newVertx):
		return self.connectedto[newVertx]
		
	def getDist(self):
		return self.distance
	def getColor(self):
		return self.color
	def getPred(self):
		return self.predecessor
	
	def setColor(self, clr):
		self.color = clr
	def setPred(self, ver):
		self.predecessor = ver
	def setDist(self, val):
		self.distance = val
		

class Graph:
	def __init__(self):
		self.vertices ={}
		self.totalVertices = 0
	
	def addVertex(self, key):
		ver = vertex(key)
		self.vertices[key]= ver
		self.totalVertices +=1
		return ver
	
	def getVertex(self, key):
		if key in self.vertices.keys():
			return self.vertices[key]
		else:
			print("No such vertex present in the graph")
			return None
	
	def getAll(self):
		return self.vertices.keys()
	
	def addEdge(self, src, dst, wght):
		if src not in self.vertices.keys():
			s= self.addVertex(src)
		if dst not in self.vertices.keys():
			d = self.addVertex(dst)
		self.vertices[src].addneighbour(self.vertices[dst],wght)
		
	def getConnection(self,key):
		x = []
		if key not in self.vertices.keys():
			return None
		for i in  self.vertices[key].getNeighors():
			x.append(i.getname())
		return key,x
		


def BFS(g, root):
	vertxQueue = []
	vertxQueue.append(root)
	root.setColor("Grey")
	while len(vertxQueue)>0:
		curr_vertex = vertxQueue.pop(0)
		for item in curr_vertex.getNeighors():
			if item.getColor() is "White":
				item.setPred(curr_vertex)
				item.setColor("Grey")
				item.setDist(curr_vertex.getDist()+1)
				vertxQueue.append(item)
		curr_vertex.setColor("Black")
		'''try:
			print(curr_vertex.getPred().getname())
		except:
			print ("rooot")'''
		

def traversal(g,key):
	
	temp = g.getVertex(key)
	if not temp:
		return
	while(temp.getPred()):
		print (temp.getname(),)
		temp = temp.getPred()
	print(temp.getname())

	
g = Graph()
a = g.addVertex('a')
b =g.addVertex('b')
c = g.addVertex('c')
d = g.addVertex('d')
e = g.addVertex('e')
g.addEdge('a','b',1)
g.addEdge('a','c',5)
g.addEdge('b','d',7)
g.addEdge('b','e',10)
#g.addEdge('c','f',10)
print (g.getAll()) 
print (g.getConnection('a'))

BFS(g,a)  # a is the root
traversal(g, 'e')
traversal(g, 'o')





	

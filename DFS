class vertex:
	def __init__(self, id):
		self.key= id
		self.distance = 0
		self.predecessor = None
		self.color = "White"
		self.connectedto={}
		self.start=0
		self.end=0	
		
	def addneighbour(self, newVertx, wgh=0):
		self.connectedto[newVertx]=wgh
	
	def getname(self):
		return self.key
	
	def getNeighors(self):
		return self.connectedto.keys()
	
	def getweight(self,newVertx):
		return self.connectedto[newVertx]
		
	def getDist(self):
		return self.distance
	def getColor(self):
		return self.color
	def getPred(self):
		return self.predecessor
	def getStartTime(self):
		return self.start
	def getEndTime(self):
		return self.end
	
	def setColor(self, clr):
		self.color = clr
	def setPred(self, ver):
		self.predecessor = ver
	def setDist(self, val):
		self.distance = val
	def setStartTime(self, val):
		self.start = val
	def setEndTime(self,val):
		self.end = val	
		

class Graph:
	def __init__(self):
		self.vertices ={}
		self.totalVertices = 0
	
	def addVertex(self, key):
		ver = vertex(key)
		self.vertices[key]= ver
		self.totalVertices +=1
		return ver
	
	def getVertex(self, key):
		if key in self.vertices.keys():
			return self.vertices[key]
		else:
			print("No such vertex present in the graph")
			return None
	
	def getAll(self):
		return self.vertices.keys()
	
	def addEdge(self, src, dst, wght):
		if src not in self.vertices.keys():
			s= self.addVertex(src)
		if dst not in self.vertices.keys():
			d = self.addVertex(dst)
		self.vertices[src].addneighbour(self.vertices[dst],wght)
		
	def getConnection(self,key):
		x = []
		if key not in self.vertices.keys():
			return None
		for i in  self.vertices[key].getNeighors():
			x.append(i.getname())
		return key,x
		


def BFS(g, root):
	vertxQueue = []
	vertxQueue.append(root)
	root.setColor("Grey")
	while len(vertxQueue)>0:
		curr_vertex = vertxQueue.pop(0)
		for item in curr_vertex.getNeighors():
			if item.getColor() is "White":
				item.setPred(curr_vertex)
				item.setColor("Grey")
				item.setDist(curr_vertex.getDist()+1)
				vertxQueue.append(item)
		curr_vertex.setColor("Black")
		'''try:
			print(curr_vertex.getPred().getname())
		except:
			print ("rooot")'''
		

def traversal(g,key):
	
	#temp = g.getVertex(key)
	temp = key
	#print (temp, temp.getPred())
	if not temp:
		return
	while(temp.getPred()):
		print (temp.getname(),)
		temp = temp.getPred()
	print(temp.getname())

class DFSGraph(Graph):
	def __init__(self):
		super().__init__()
		self.time = 0
	
	def DFS(self):
		for startVertex in self.vertices.values():
			#print(startVertex.getname())
			startVertex.setColor("White")
			startVertex.setPred(None)
		
		for startVertex in self.vertices.values():
			if startVertex.getColor()=="White":
				#print(startVertex.getname())
				self.dffvisit(startVertex)
	
	def dffvisit(self,startVertex):
		print(startVertex.getname())
		startVertex.setColor("Grey")
		self.time += 1
		startVertex.setStartTime(self.time)
		for nextVertex in startVertex.getNeighors():
			if nextVertex.getColor() == "White":
				nextVertex.setPred(startVertex)
				self.dffvisit(nextVertex)
		startVertex.setColor("Black")
		self.time +=1
		startVertex.setEndTime(self.time)

'''def paths(g,n1,n2):
	g.dffvisit(n1)
	g.DFS()
	print ("----------------")
	n1.setColor("Black")
	for curr_vertex in n1.getNeighors():
		curr = curr_vertex
		print(n1.getname(),end= ' ')
		#g.DFS()
		print(curr_vertex.getname(),end= ' ')
		for nextVertex in curr.getNeighors():
			if nextVertex.getColor() =="White" :
				tmp=nextVertex
				while tmp.getname() != n2.getname():
					print (tmp.getname(), end = " ")
					tmp = tmp.getPred()
			curr = nextVertex
				
		curr_vertex.setColor("Black")
		print ("")
'''
count = 1
def paths(g,n1,n2):
	if n2 in n1.getNeighors():
		if n1 == n2:
			print (n1.getname())
		return
	tmp= n1
	for nextVertex in tmp.getNeighors():
		paths(g, nextVertex,n2)
		print (nextVertex.getname(),end ="<-")
	print(n2.getname())	
	
	
g = DFSGraph()
a = g.addVertex('2')
b =g.addVertex('0')
c = g.addVertex('1')
d = g.addVertex('3')
#e = g.addVertex('e')
g.addEdge('0','1',1)
g.addEdge('0','2',5)
g.addEdge('1','2',7)
g.addEdge('2','0',10)
g.addEdge('2','3',10)
g.addEdge('3','3',10)

g.DFS()
#traversal(g, a)
print("-----------------")
#g.dffvisit(b)
paths(g,c,d)


			
		
		
		
	
	

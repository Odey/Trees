class BinaryTree:
    def __init__(self,rootObj):
        self.key = rootObj
        self.leftChild = None
        self.rightChild = None

    def insertLeft(self,newNode):
        if self.leftChild == None:
            self.leftChild = BinaryTree(newNode)
        else:
            t = BinaryTree(newNode)
            t.leftChild = self.leftChild
            self.leftChild = t

    def insertRight(self,newNode):
        if self.rightChild == None:
            self.rightChild = BinaryTree(newNode)
        else:
            t = BinaryTree(newNode)
            t.rightChild = self.rightChild
            self.rightChild = t


    def getRightChild(self):
        return self.rightChild

    def getLeftChild(self):
        return self.leftChild

    def setRootVal(self,obj):
        self.key = obj

    def getRootVal(self):
        return self.key

def printTree_inorder(tree):
	if tree!=None:
		printTree_inorder(tree.getLeftChild())
		print(tree.getRootVal())
		printTree_inorder(tree.getRightChild())
		
def parseTree(st):
	rootStack =[]
	first = BinaryTree('')
	rootStack.append(first)
	curr = first
	for i in st:
		if i == '(':
			curr.insertLeft('')
			rootStack.append(curr)
			curr = curr.getLeftChild()
		elif i.isalnum():
			curr.setRootVal(i)
			curr = rootStack.pop()
		elif i in ['-','+','*','/']:
			curr.setRootVal(i)
			curr.insertRight('')
			rootStack.append(curr)
			curr = curr.getRightChild()
		elif i ==')':
			curr = rootStack.pop()
		else:
			raise ValueError
	return first
		
		
	
	
pt = parseTree("(3+(4*5))")	
printTree_inorder(pt)		
		
